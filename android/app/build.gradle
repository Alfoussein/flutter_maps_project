plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
   keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.example.maps_project_flutter"
    compileSdkVersion 34

    defaultConfig {
        applicationId "com.example.maps_project_flutter"
        minSdkVersion 21
        targetSdkVersion 34
        versionCode 1
        versionName "1.0"
    }

   signingConfigs {
       release {
           if (keystoreProperties.containsKey('keyAlias') &&
                keystoreProperties.containsKey('keyPassword') &&
                keystoreProperties.containsKey('storeFile') &&
                keystoreProperties.containsKey('storePassword')) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            } else {
                // Fallback to debug signing config if key.properties is missing or incomplete
                signingConfig signingConfigs.debug
            }
       }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
            signingConfig signingConfigs.release
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }
}

flutter {
    source '../..'
}
